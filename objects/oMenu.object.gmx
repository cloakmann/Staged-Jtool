<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-150</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//menu_height = 290//200
menu_height = 500//200
x = 0
y = -menu_height
steps_in_menu = 0
steps_out_of_menu = 0
yspeed = 0
escape_button_just_clicked = false

global.stopX = -1
   global.stopY = 0
   global.stopgrav = 0
   global.stopplayer_xscale = 0

Background = sprite_add("Screenie.png", 0, false, true, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>continueRecordBegin()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>steps_out_of_menu += 1
if (keyboard_check_pressed(vk_escape) or escape_button_just_clicked)
and global.state == globalstate_menu
and steps_in_menu &gt; 0 {
    global.state = globalstate_idle
    steps_out_of_menu = 0
    restoreZoom()
}

if global.state == globalstate_menu {
    var dy = (0-y)*0.25
    if dy &gt; 1 y = floor(y + dy)
    steps_in_menu += 1
}
else if global.state == globalstate_idle {
    y += (-(menu_height+40)-y)*0.1
    if y &lt; -menu_height y = -menu_height
    steps_in_menu = -1
}

escape_button_just_clicked = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw FILE column
//draw_sprite(sMenu,0,0,y-(sprite_get_height(sMenu)-menu_height))
draw_sprite_stretched(sMenu,0,0,y,1056,menu_height)

var buttons_enabled = global.state == globalstate_menu and steps_in_menu &gt; 0
var w = 130
var h = 32
var dx = 140
var dy = 40
var dx2 = 40
var xo = 20
var yo = 50

var xx = x+xo
var yy = y+yo
menuSection(xx,yy,'File',false)

// open map
var clicked = menuButton(xx,yy,w,h,'Open Map',buttons_enabled,sMenuOpen)
var shortcut = keyboard_check(vk_control) and keyboard_check_pressed(ord('O'))
if clicked or shortcut {
    if not oEdit.undo_nochanges {
        inputOverlay(input_yesno,inputCallback_LoadMap,
        'Map has been modified. Save changes?')
    }
    else {
        global.input_bool = false
        global.input_cancel = false
        inputCallback_LoadMap()
    }
}

// save map
yy += dy
var clicked = menuButton(xx,yy,w,h,'Save Map',buttons_enabled,sMenuSave)
var shortcut = keyboard_check(vk_control) and keyboard_check_pressed(ord('S'))
if clicked or shortcut {
    if window_get_fullscreen() {
        window_set_fullscreen(false)
        oWorld.alarm[0] = 1
        oWorld.alarm[1] = 2
    }
    else saveMap()
}

// open RMJ
yy += dy
if menuButton(xx,yy,w,h,'Import RMJ Map',buttons_enabled,false) {
    if not oEdit.undo_nochanges {
        inputOverlay(input_yesno,inputCallback_LoadRMJMap,
        'Map has been modified. Save changes?')
    }
    else {
        global.input_bool = false
        global.input_cancel = false
        inputCallback_LoadRMJMap()
    }
}

//save RMJ
yy += dy
if menuButton(xx,yy,w,h,'Export RMJ Map',buttons_enabled,false) {
    if window_get_fullscreen() {
        window_set_fullscreen(false)
        oWorld.alarm[0] = 1
        oWorld.alarm[4] = 2
    }
    else saveRMJMap()
}
//save REC
yy += dy
if global.paused = false and menuButton(xx,yy,w,h,'Save Record',buttons_enabled,false) {
    saveRecordAskName()
}
//load REC
yy += dy
if global.paused = false and menuButton(xx,yy,w,h,'Load Record',buttons_enabled,false) {
    loadRecordAskName()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw MAP column
xx += dx+dx2
yy = y+yo
menuSection(xx,yy,'Map',true)

// dotkid
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuDotkid,
'[ Dotkid ]','Dotkid',global.dotkid) {
    global.dotkid = not global.dotkid
}

// save type
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuSavePoint,
'Z Saves','Shoot Saves',global.savetype) {
    global.savetype = not global.savetype
    saveConfig()
}

// inf jump
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuInfJump,
'[ Inf Jump ]','Inf Jump',global.infinitejump) {
    global.infinitejump = not global.infinitejump
    if global.infinitejump oJumpManyTimes.image_alpha = 2
}

// border type
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuBorderType,
'Solid Border','Death Border',global.bordertype) {
    global.bordertype = not global.bordertype
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oMenu</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Preferences area column 1
xx += dx+dx2
yy = y+yo
menuSection(xx,yy,'Preferences',true)

// death enabled
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuDeath,
'[ Death ]','Death',global.deathEnabled) {
    global.deathEnabled = not global.deathEnabled
    saveConfig()
}

// grid draw
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuGrid,
'Grid: '+string(global.grid_draw),'Grid: off',global.grid_draw != 0) {
    switch global.grid_draw {
        case 0: global.grid_draw = 32 break
        case 32: global.grid_draw = 16 break
        case 16: global.grid_draw = 8 break
        case 8: global.grid_draw = 4 break
        case 4: global.grid_draw = 2 break
        case 2: global.grid_draw = 0 break
        default: global.grid_draw = 0 break
    }
    oDrawGrid.needToRedrawSurf = true
    saveConfig()
}

// show hitbox
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuHitbox,
'[ Hitbox ]','Hitbox',global.showhitbox) {
    global.showhitbox += 1
    if global.showhitbox &gt; 2 global.showhitbox = 0
    saveConfig()
}

// outline
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuDotOutline,
'[ Dot Outline ]','Dot Outline',global.dotkidoutline) {
    global.dotkidoutline = not global.dotkidoutline
    saveConfig()
}

yy += dy
yy += dy
menuSection(xx,yy,'Record',true)

// start record
//yy += dy
if menuButton(xx,yy,w,h,'Record',buttons_enabled,sMenuRecord) {
   global.PlayerFrameCounter = 0
    startRecord();
    escape_button_just_clicked = true;
}
/*
//continue record
yy +=dy
if menuButton(xx,yy,w,h,'Continue',buttons_enabled,sMenuContinue) {
    escape_button_just_clicked = true;
    if global.paused = false {
    continueRecordAskName() }
}
*/

yy += dy
yy += dy
menuSection(xx,yy,'Music Player',true)

//continue record
//yy +=dy
menuSection(xx,yy,'Music Player',false)

if (global.ms_pause == false) {
    if menuButton(xx,yy,w,h,'Play',buttons_enabled,sMenuPlay) {
        ms_pause_music()
    }
}
else {
    if menuButton(xx,yy,w,h,'[ Pause ]',buttons_enabled,sMenuPause) {
        ms_pause_music()
    }
}
// reload
yy += dy
if menuButton(xx,yy,w,h,'Reload',buttons_enabled,sMenuReload) {
    ms_reload_music()
}



yy += dy*1.5

// music position
draw_sprite(sMenuPosLine,0,xx,yy)

var px1 = xx;
var pw = sprite_get_width(sMenuPosLine);
var pos = FMODInstanceGetPosition(global.ms_cur_music);

var plx = xx+pos*pw;

draw_sprite(sMenuPos,0,plx,yy)

draw_set_halign(fa_left)
draw_set_valign(fa_middle)

//yy += dy
yy += dy*1.5

if global.ms_system
    draw_text(xx,yy-45,'Now Playing: '+'['+string(global.ms_cur_num)+']'+ms_get_name())
else
    draw_text(xx,yy-45,"Music File Not Exists")
if global.ms_system {
    yy += dy*0.5
    var len = floor(FMODSoundGetLength(FMODInstanceGetSound(global.ms_cur_music))/1000);
    var lsec = len mod 60;
    var lmin = (len div 60) mod 60
    var lhour = len div 3600
    
    
    var cur = floor(FMODInstanceGetPosition(global.ms_cur_music)*len)
    var csec = cur mod 60;
    var cmin = (cur div 60) mod 60
    var chour = cur div 3600
    
    draw_text(xx,yy-45,'Time: '+string(chour)+':'+string(cmin)+':'+string(csec)+'/'+string(lhour)+':'+string(lmin)+':'+string(lsec))
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Preferences area column 2

// change skin
xx += dx
yy = y+yo
var m = menuButtonTwoPart(xx,yy,w,h,'Change Skin',buttons_enabled,sMenuSkin)
if m != 0 {
    cycleSkin((m-1)*2-1)
}

if(keyboard_check_pressed(vk_pageup)){
    cycleSkin(-1);
}
if(keyboard_check_pressed(vk_pagedown)){
    cycleSkin(1);
}

// toggle mouse coords
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuCoords,
'[ Coordinates ]','Coordinates',global.mousecoords) {
    global.mousecoords = not global.mousecoords
    saveConfig()
}

// fullscreen
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuFullscreen,'[ Fullscreen ]','Fullscreen',window_get_fullscreen())
or (keyboard_check_pressed(vk_f4) and not keyboard_check_direct(vk_alt)) {
    window_set_fullscreen(not window_get_fullscreen())
    oWorld.alarm[0]=1
    completelyResetZoom()
    saveConfig()
}

// hide sidebar
yy += dy
var sidebar_spr = sMenuSidebar
if global.hidesidebar sidebar_spr = sMenuSidebar2
if menuButtonToggle(xx,yy,w,h,buttons_enabled,sidebar_spr,
'Show Sidebar','Hide Sidebar',global.hidesidebar) {
    global.hidesidebar = not global.hidesidebar
    saveConfig()
}

// stop record
yy += dy
yy += dy
if menuButton(xx,yy,w,h,'Stop',buttons_enabled,sMenuStop) {
   global.savecount = 0
   global.SavedPlayerFrameCounter = global.PlayerFrameCounter
   if instance_exists(oPlayer) {
   global.stopX = oPlayer.x
   global.stopY = oPlayer.y
   global.stopgrav = global.recordGrav
   global.stopplayer_xscale = global.player_xscale
   global.stopVspeed = oPlayer.vspeed
   global.stopDjump = oPlayer.djump }
   else if global.paused { 
   
   global.stopX = global.pausedX
   global.stopY = global.pausedY
   global.stopgrav = global.pausedgrav
   global.stopplayer_xscale = global.pausedplayer_xscale
   global.stopVspeed = global.pausedVspeed
   global.stopDjump = global.pausedDjump }
   
    playRecord();
    escape_button_just_clicked = true;
}


yy += dy
yy += dy
//yy += dy
if menuButton(xx,yy,w,h,'Previous',buttons_enabled,sMenuPrevious) {
    ms_prev_music()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Preferences area column 3
// depth
xx += dx
yy = y+yo
if menuButton(xx,yy,w,h,'Depth Order',buttons_enabled,sMenuDepth) {
    inputOverlay(input_depth, false, '')
}

// water lock
yy += dy
var waterlock_spr = sMenuWaterLock2
if global.waterlocked waterlock_spr = sMenuWaterLock
if menuButtonToggle(xx,yy,w,h,buttons_enabled,waterlock_spr,'[ Lock Water ]','Lock Water',global.waterlocked) {
    global.waterlocked = not global.waterlocked
}

// clear map
yy += dy
if (menuButton(xx,yy,w,h,'Clear Map (F2)',buttons_enabled,sMenuClearMap)
or keyboard_check_pressed(vk_f2)) and global.paused=false {
    if not oEdit.undo_nochanges {
        inputOverlay(input_yesno,inputCallback_ClearMap,
        'Map has been modified. Save changes?')
    }
    else {
        global.input_bool = false
        global.input_cancel = false
        inputCallback_ClearMap()
    }
}

// toggle backups
yy += dy
if menuButtonToggle(xx,yy,w,h,buttons_enabled,0,'Backups on','Backups off',global.backup) {
    global.backup = not global.backup
    saveConfig()
}

yy += dy
yy += dy
if menuButton(xx,yy,w,h,'Eraser',buttons_enabled,sMenuEraser) {
    eraserRecord();
    global.record = 0
    global.FrameCounterOn = false
    global.PlayerFrameCounter = 0
}


yy += dy
yy += dy
//yy += dy
if menuButton(xx,yy,w,h,'Next',buttons_enabled,sMenuNext) {
    ms_next_music()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Preferences area column 4
// toggle update check
xx += dx

// shift all objects
var sw = 18;
var sh = 18;
var sdy = 12;
var sdx = 25;

yy = y+yo
repeat(4) yy += dy

yy -= dy-6

xx += sdx*2
if menuButtonShift(xx, yy, sw, sh, '&gt;', buttons_enabled, 0) {
    with( oEdit ) { clearUndoStack(); }
    with all if objectInPalette(object_index) x += oEdit.snap;
}
xx -= sdx
yy += sdy
if menuButtonShift(xx, yy, sw, sh, 'v', buttons_enabled, 0) {
    with( oEdit ) { clearUndoStack(); }
    with all if objectInPalette(object_index) y += oEdit.snap
}
yy -= sdy*2
if menuButtonShift(xx, yy, sw, sh, '^', buttons_enabled, 0) {
    with( oEdit ) { clearUndoStack(); }
    with all if objectInPalette(object_index) y -= oEdit.snap
}
xx -= sdx
yy += sdy
if menuButtonShift(xx, yy, sw, sh, '&lt;', buttons_enabled, 0) {
    with( oEdit ) { clearUndoStack(); }
    with all if objectInPalette(object_index) x -= oEdit.snap
}

yy = y+yo
yy += 5 * dy
if menuButton(xx,yy,w,h,'Continue',buttons_enabled,sMenuContinue) {
    escape_button_just_clicked = true;
    if global.paused = false {
    continueRecordAskName() }
}

yy = y+yo
yy += 7 * dy

if menuButtonToggle(xx,yy,w,h,buttons_enabled,sMenuLoop,
'[ Loop ]','Loop',global.ms_loop_music) {
    ms_toggle_loop()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw close menu column
// close menu
xx = 1056-w-8
yy = y+12
if menuButton(xx,yy,w,h,'Close Menu (Esc)',buttons_enabled,false) 
or (buttons_enabled and mouse_y &gt; y+menu_height and mouse_check_button_pressed(mb_left)) {
    escape_button_just_clicked = true
}

// about
yy += dy
if menuButton(xx,yy,w,h,'About',buttons_enabled,false) {
    inputOverlay(input_about,false,'')
}

// game end
yy += dy
if menuButton(xx,yy,w,h,'Quit',buttons_enabled,false) {
    exitPressed()
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
